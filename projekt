import json
import requests
import tkinter as tk
from tkinter import messagebox, ttk
from geopy.geocoders import Nominatim
from PIL import Image, ImageTk
import io
import webbrowser

API_KEY = 'klucz do api'
BASE_URL = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json'
PHOTO_BASE_URL = 'https://maps.googleapis.com/maps/api/place/photo'
RADIUS_KM = 5000

def get_location(address):
    geolocator = Nominatim(user_agent="meal_selector")
    location = geolocator.geocode(address)
    if location:
        return location
    else:
        raise ValueError("Nie można znaleźć lokalizacji dla podanego adresu.")

def search_restaurants(location, keyword='', radius_km=RADIUS_KM, type='restaurant'):
    params = {
        'location': f'{location.latitude},{location.longitude}',
        'radius': radius_km,
        'type': type,
        'keyword': keyword,
        'key': API_KEY
    }
    response = requests.get(BASE_URL, params=params)
    results = response.json().get('results', [])
    return results

def filter_restaurants(restaurants, min_rating):
    filtered = [
        r for r in restaurants
        if r.get('rating', 2) >= min_rating
    ]
    return filtered

def analyze_user_preferences(selected_restaurants, user_preferences):
    for restaurant in selected_restaurants:
        name = restaurant['name']
        if name in user_preferences:
            user_preferences[name] += 1
        else:
            user_preferences[name] = 1

def save_user_preferences(user_preferences, file_path='user_preferences.json'):
    with open(file_path, 'w') as f:
        json.dump(user_preferences, f)

def load_user_preferences(file_path='user_preferences.json'):
    try:
        with open(file_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def get_photo(photo_reference):
    if not photo_reference:
        return None
    params = {
        'maxwidth': 400,  # Adjust max width as needed
        'photoreference': photo_reference,
        'key': API_KEY
    }
    response = requests.get(PHOTO_BASE_URL, params=params)
    if response.status_code == 200:
        return response.url
    return None

def on_hover(event, photo_reference):
    if photo_reference:
        photo_url = get_photo(photo_reference)
        if photo_url:
            response = requests.get(photo_url)
            image = Image.open(io.BytesIO(response.content))
            image.thumbnail((400, 400))
            photo = ImageTk.PhotoImage(image)
            image_label.config(image=photo)
            image_label.image = photo  # Keep a reference to avoid garbage collection
        else:
            image_label.config(image='', text='Błąd pobierania zdjęcia')
    else:
        image_label.config(image='', text='Brak zdjęcia')

def on_search():
    address = address_entry.get()
    keyword = cuisine_var.get()  # Added for cuisine preferences
    try:
        min_rating = float(min_rating_entry.get())
    except ValueError:
        messagebox.showerror("Błąd", "Minimalna ocena musi być liczbą.")
        return

    try:
        location = get_location(address)
        results_label.config(text=f"Uzyskana lokalizacja: {location.address}")

        restaurants = search_restaurants(location, keyword)
        if restaurants:
            filtered_restaurants = filter_restaurants(restaurants, min_rating)

            user_preferences = load_user_preferences()

            analyze_user_preferences(filtered_restaurants, user_preferences)
            save_user_preferences(user_preferences)

            result_text_box.config(state=tk.NORMAL)
            result_text_box.delete(1.0, tk.END)

            if filtered_restaurants:
                result_text = f"Znaleziono {len(filtered_restaurants)} restauracji spełniających kryteria:\n"
                for i, r in enumerate(filtered_restaurants, start=1):
                    rating = r.get('rating', 'N/A')
                    price_level = r.get('price_level', 'N/A')
                    restaurant_address = r.get('vicinity', 'Adres niedostępny')
                    link = f"https://www.google.com/maps/search/?api=1&query={r['name']} {r['geometry']['location']['lat']},{r['geometry']['location']['lng']}"
                    photo_reference = r.get('photos', [{}])[0].get('photo_reference', None)

                    result_text_box.insert(tk.END, f"{i}. {r['name']} (Adres: {restaurant_address}, Ocena: {rating}, Cena: {price_level})\n", f"link_{i}")
                    result_text_box.tag_config(f"link_{i}", foreground="blue", underline=True)
                    result_text_box.tag_bind(f"link_{i}", "<Button-1>", lambda e, link=link: webbrowser.open(link))
                    result_text_box.tag_bind(f"link_{i}", "<Enter>", lambda e, pr=photo_reference: on_hover(e, pr))

            else:
                result_text_box.insert(tk.END, "Nie znaleziono restauracji spełniających kryteria.")
        else:
            result_text_box.insert(tk.END, "Nie znaleziono restauracji w pobliżu.")

        result_text_box.config(state=tk.DISABLED)
    except ValueError as e:
        messagebox.showerror("Błąd", str(e))

root = tk.Tk()
root.title("Wybór Restauracji")
root.geometry("1200x800")

style = ttk.Style()
style.configure("TLabel", font=("Helvetica", 12))
style.configure("TButton", font=("Helvetica", 12))
style.configure("TEntry", font=("Helvetica", 12))

main_frame = ttk.Frame(root, padding="10")
main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)

left_panel = ttk.Frame(main_frame, padding="10")
left_panel.grid(row=0, column=0, sticky=(tk.N, tk.S, tk.W))

tk.Label(left_panel, text="Podaj adres:").grid(row=0, column=0, sticky=tk.W)
address_entry = ttk.Entry(left_panel, width=50)
address_entry.grid(row=1, column=0, pady=5, sticky=tk.W)

tk.Label(left_panel, text="Minimalna ocena (0-5):").grid(row=2, column=0, sticky=tk.W)
min_rating_entry = ttk.Entry(left_panel, width=10)
min_rating_entry.grid(row=3, column=0, pady=5, sticky=tk.W)

# Added for cuisine preferences
cuisine_var = tk.StringVar()
cuisine_choices = ['Wszystkie', 'Kuchnia włoska', 'Kuchnia polska', 'Burgery', 'Fast food']
cuisine_dropdown = ttk.Combobox(left_panel, text="Wybierz kuchnię", textvariable=cuisine_var, values=cuisine_choices)
cuisine_dropdown.current(0)
cuisine_dropdown.grid(row=4, column=0, pady=5, sticky=tk.W)

search_button = ttk.Button(left_panel, text="Szukaj", command=on_search)
search_button.grid(row=5, column=0, pady=10, sticky=(tk.W, tk.E))

results_label = ttk.Label(left_panel, text="", wraplength=300)
results_label.grid(row=6, column=0, pady=10, sticky=tk.W)

middle_panel = ttk.Frame(main_frame, padding="10")
middle_panel.grid(row=0, column=1, sticky=(tk.N, tk.S, tk.W, tk.E))

scrollbar = ttk.Scrollbar(middle_panel)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

result_text_box = tk.Text(middle_panel, wrap=tk.WORD, yscrollcommand=scrollbar.set, state=tk.DISABLED, width=50)
result_text_box.pack(expand=True, fill=tk.BOTH)
scrollbar.config(command=result_text_box.yview)

right_panel = ttk.Frame(main_frame, padding="10")
right_panel.grid(row=0, column=2, sticky=(tk.N, tk.S, tk.W, tk.E))

image_label = ttk.Label(right_panel, text="Brak zdjęcia", wraplength=300)
image_label.pack(expand=True, fill=tk.BOTH)

main_frame.columnconfigure(0, weight=1)
main_frame.columnconfigure(1, weight=2)
main_frame.columnconfigure(2, weight=1)
main_frame.rowconfigure(0, weight=1)

root.mainloop()
